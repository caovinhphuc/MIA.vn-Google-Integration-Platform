#!/usr/bin/env python3
"""
ONE Automation System - Health Check
Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa h·ªá th·ªëng
"""

import os
import sys
import json
import time
import psutil
import requests
from datetime import datetime, timedelta
from pathlib import Path

def check_system_resources():
    """Ki·ªÉm tra t√†i nguy√™n h·ªá th·ªëng"""
    print("üîç Ki·ªÉm tra t√†i nguy√™n h·ªá th·ªëng...")

    # CPU usage
    cpu_percent = psutil.cpu_percent(interval=1)
    print(f"  üíª CPU: {cpu_percent}%")

    # Memory usage
    memory = psutil.virtual_memory()
    print(f"  üß† RAM: {memory.percent}% ({memory.used // 1024 // 1024}MB / {memory.total // 1024 // 1024}MB)")

    # Disk usage
    disk = psutil.disk_usage('/')
    print(f"  üíæ Disk: {disk.percent}% ({disk.used // 1024 // 1024 // 1024}GB / {disk.total // 1024 // 1024 // 1024}GB)")

    # Check if resources are healthy
    issues = []
    if cpu_percent > 80:
        issues.append("CPU usage cao")
    if memory.percent > 85:
        issues.append("RAM usage cao")
    if disk.percent > 90:
        issues.append("Disk usage cao")

    return issues

def check_processes():
    """Ki·ªÉm tra process automation ƒëang ch·∫°y"""
    print("üîç Ki·ªÉm tra processes...")

    automation_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['cmdline'] and any('automation.py' in cmd for cmd in proc.info['cmdline']):
                automation_processes.append({
                    'pid': proc.info['pid'],
                    'name': proc.info['name'],
                    'cmdline': ' '.join(proc.info['cmdline'])
                })
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    if automation_processes:
        print(f"  ‚úÖ T√¨m th·∫•y {len(automation_processes)} automation process(es)")
        for proc in automation_processes:
            print(f"    PID {proc['pid']}: {proc['cmdline']}")
    else:
        print("  ‚ùå Kh√¥ng t√¨m th·∫•y automation process n√†o")

    return len(automation_processes) > 0

def check_files_and_directories():
    """Ki·ªÉm tra files v√† directories c·∫ßn thi·∫øt"""
    print("üîç Ki·ªÉm tra files v√† directories...")

    required_items = {
        'files': ['automation.py', 'utils.py', 'requirements.txt', 'config/config.json'],
        'directories': ['data', 'logs', 'reports', 'config']
    }

    issues = []

    # Check files
    for file_path in required_items['files']:
        if not Path(file_path).exists():
            issues.append(f"File thi·∫øu: {file_path}")
        else:
            print(f"  ‚úÖ {file_path}")

    # Check directories
    for dir_path in required_items['directories']:
        if not Path(dir_path).exists():
            issues.append(f"Directory thi·∫øu: {dir_path}")
        else:
            print(f"  ‚úÖ {dir_path}/")

    return issues

def check_log_files():
    """Ki·ªÉm tra log files g·∫ßn ƒë√¢y"""
    print("üîç Ki·ªÉm tra log files...")

    logs_dir = Path('logs')
    if not logs_dir.exists():
        return ["Th∆∞ m·ª•c logs kh√¥ng t·ªìn t·∫°i"]

    # Find recent log files
    now = datetime.now()
    recent_logs = []

    for log_file in logs_dir.glob('*.log'):
        mtime = datetime.fromtimestamp(log_file.stat().st_mtime)
        if now - mtime < timedelta(days=7):
            recent_logs.append({
                'file': log_file.name,
                'size': log_file.stat().st_size,
                'mtime': mtime
            })

    if recent_logs:
        print(f"  ‚úÖ T√¨m th·∫•y {len(recent_logs)} log file(s) g·∫ßn ƒë√¢y")
        for log in sorted(recent_logs, key=lambda x: x['mtime'], reverse=True)[:3]:
            size_mb = log['size'] / 1024 / 1024
            print(f"    {log['file']}: {size_mb:.1f}MB ({log['mtime'].strftime('%Y-%m-%d %H:%M')})")
    else:
        print("  ‚ùå Kh√¥ng t√¨m th·∫•y log file n√†o g·∫ßn ƒë√¢y")

    return []

def check_data_files():
    """Ki·ªÉm tra data files g·∫ßn ƒë√¢y"""
    print("üîç Ki·ªÉm tra data files...")

    data_dir = Path('data')
    if not data_dir.exists():
        return ["Th∆∞ m·ª•c data kh√¥ng t·ªìn t·∫°i"]

    # Count files by type
    file_counts = {}
    total_size = 0

    for data_file in data_dir.rglob('*'):
        if data_file.is_file():
            ext = data_file.suffix.lower()
            file_counts[ext] = file_counts.get(ext, 0) + 1
            total_size += data_file.stat().st_size

    if file_counts:
        print(f"  ‚úÖ T·ªïng c·ªông {sum(file_counts.values())} file(s), {total_size / 1024 / 1024:.1f}MB")
        for ext, count in sorted(file_counts.items()):
            print(f"    {ext or 'no extension'}: {count} file(s)")
    else:
        print("  ‚ùå Kh√¥ng t√¨m th·∫•y data file n√†o")

    return []

def check_configuration():
    """Ki·ªÉm tra c·∫•u h√¨nh"""
    print("üîç Ki·ªÉm tra c·∫•u h√¨nh...")

    issues = []

    # Check config.json
    config_file = Path('config/config.json')
    if config_file.exists():
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)

            # Check required sections
            required_sections = ['system', 'schedule', 'notifications', 'data_processing']
            for section in required_sections:
                if section not in config:
                    issues.append(f"Config section thi·∫øu: {section}")
                else:
                    print(f"  ‚úÖ {section}")

        except json.JSONDecodeError as e:
            issues.append(f"Config JSON kh√¥ng h·ª£p l·ªá: {e}")
    else:
        issues.append("File config.json kh√¥ng t·ªìn t·∫°i")

    # Check .env file
    env_file = Path('.env')
    if env_file.exists():
        print("  ‚úÖ .env file")
    else:
        issues.append("File .env kh√¥ng t·ªìn t·∫°i")

    return issues

def check_network_connectivity():
    """Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng"""
    print("üîç Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng...")

    # Test URLs
    test_urls = [
        'https://google.com',
        'https://github.com'
    ]

    issues = []
    for url in test_urls:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"  ‚úÖ {url}")
            else:
                issues.append(f"HTTP {response.status_code} from {url}")
        except requests.exceptions.RequestException as e:
            issues.append(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi {url}: {e}")

    return issues

def generate_health_report():
    """T·∫°o b√°o c√°o t·ªïng h·ª£p"""
    print("\n" + "="*60)
    print("üìä B√ÅO C√ÅO S·ª®C KH·ªéE H·ªÜ TH·ªêNG")
    print("="*60)

    all_issues = []

    # Run all checks
    checks = [
        ("System Resources", check_system_resources),
        ("Processes", lambda: [] if check_processes() else ["Automation process kh√¥ng ch·∫°y"]),
        ("Files & Directories", check_files_and_directories),
        ("Log Files", check_log_files),
        ("Data Files", check_data_files),
        ("Configuration", check_configuration),
        ("Network Connectivity", check_network_connectivity)
    ]

    for check_name, check_func in checks:
        print(f"\n{check_name}:")
        try:
            issues = check_func()
            all_issues.extend(issues)
        except Exception as e:
            issue = f"L·ªói khi ki·ªÉm tra {check_name}: {e}"
            print(f"  ‚ùå {issue}")
            all_issues.append(issue)

    # Summary
    print("\n" + "="*60)
    print("üìã T·ªîNG K·∫æT")
    print("="*60)

    if not all_issues:
        print("‚úÖ H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!")
        return True
    else:
        print(f"‚ùå Ph√°t hi·ªán {len(all_issues)} v·∫•n ƒë·ªÅ:")
        for i, issue in enumerate(all_issues, 1):
            print(f"  {i}. {issue}")
        return False

def main():
    """Main function"""
    print("üè• ONE Automation System - Health Check")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # Change to script directory
    os.chdir(Path(__file__).parent)

    # Generate report
    is_healthy = generate_health_report()

    # Exit with appropriate code
    sys.exit(0 if is_healthy else 1)

if __name__ == "__main__":
    main()
