#!/usr/bin/env python3
"""
ONE Automation System - Test Runner
Ch·∫°y c√°c test cases ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng
"""

import unittest
import sys
import os
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

class TestSystemSetup(unittest.TestCase):
    """Test c·∫•u h√¨nh h·ªá th·ªëng"""

    def test_config_file_exists(self):
        """Ki·ªÉm tra file config t·ªìn t·∫°i"""
        config_path = project_root / "config" / "config.json"
        self.assertTrue(config_path.exists(), "File config.json kh√¥ng t·ªìn t·∫°i")

    def test_required_directories(self):
        """Ki·ªÉm tra c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
        required_dirs = ["data", "logs", "reports", "config"]
        for dir_name in required_dirs:
            dir_path = project_root / dir_name
            self.assertTrue(dir_path.exists(), f"Th∆∞ m·ª•c {dir_name} kh√¥ng t·ªìn t·∫°i")

    def test_python_files(self):
        """Ki·ªÉm tra c√°c file Python ch√≠nh"""
        required_files = ["automation.py", "utils.py"]
        for file_name in required_files:
            file_path = project_root / file_name
            self.assertTrue(file_path.exists(), f"File {file_name} kh√¥ng t·ªìn t·∫°i")

class TestEnvironmentVariables(unittest.TestCase):
    """Test bi·∫øn m√¥i tr∆∞·ªùng"""

    def test_env_template_exists(self):
        """Ki·ªÉm tra file template m√¥i tr∆∞·ªùng"""
        env_template = project_root / "env_template.txt"
        self.assertTrue(env_template.exists(), "File env_template.txt kh√¥ng t·ªìn t·∫°i")

class TestDependencies(unittest.TestCase):
    """Test dependencies"""

    def test_requirements_file(self):
        """Ki·ªÉm tra file requirements.txt"""
        req_file = project_root / "requirements.txt"
        self.assertTrue(req_file.exists(), "File requirements.txt kh√¥ng t·ªìn t·∫°i")

        # Ki·ªÉm tra n·ªôi dung c√≥ c√°c package c·∫ßn thi·∫øt
        with open(req_file, 'r') as f:
            content = f.read()
            required_packages = ['selenium', 'pandas', 'schedule']
            for package in required_packages:
                self.assertIn(package, content, f"Package {package} kh√¥ng c√≥ trong requirements.txt")

class TestImports(unittest.TestCase):
    """Test import c√°c module"""

    def test_import_automation(self):
        """Test import automation module"""
        try:
            import automation
            self.assertTrue(True)
        except ImportError as e:
            self.fail(f"Kh√¥ng th·ªÉ import automation: {e}")

    def test_import_utils(self):
        """Test import utils module"""
        try:
            import utils
            self.assertTrue(True)
        except ImportError as e:
            self.fail(f"Kh√¥ng th·ªÉ import utils: {e}")

def run_system_check():
    """Ch·∫°y ki·ªÉm tra h·ªá th·ªëng c∆° b·∫£n"""
    print("üîç ƒêang ki·ªÉm tra h·ªá th·ªëng...")

    # Ki·ªÉm tra Python version
    python_version = sys.version_info
    print(f"‚úÖ Python version: {python_version.major}.{python_version.minor}.{python_version.micro}")

    if python_version < (3, 7):
        print("‚ùå C·∫ßn Python 3.7 tr·ªü l√™n")
        return False

    # Ki·ªÉm tra c√°c package c·∫ßn thi·∫øt
    required_packages = {
        'selenium': 'Selenium WebDriver',
        'pandas': 'Data processing',
        'schedule': 'Task scheduling',
        'openpyxl': 'Excel support'
    }

    missing_packages = []
    for package, description in required_packages.items():
        try:
            __import__(package)
            print(f"‚úÖ {package}: {description}")
        except ImportError:
            print(f"‚ùå {package}: {description} - THI·∫æU")
            missing_packages.append(package)

    if missing_packages:
        print(f"\nüì¶ C√†i ƒë·∫∑t c√°c package thi·∫øu:")
        print(f"pip install {' '.join(missing_packages)}")
        return False

    return True

def main():
    """Main function"""
    print("ü§ñ ONE Automation System - Test Runner")
    print("=" * 50)

    # Ch·∫°y system check tr∆∞·ªõc
    if not run_system_check():
        print("\n‚ùå System check th·∫•t b·∫°i!")
        sys.exit(1)

    print("\nüß™ Ch·∫°y test cases...")
    print("=" * 50)

    # T·∫°o test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()

    # Th√™m c√°c test classes
    test_classes = [
        TestSystemSetup,
        TestEnvironmentVariables,
        TestDependencies,
        TestImports
    ]

    for test_class in test_classes:
        tests = loader.loadTestsFromTestCase(test_class)
        suite.addTests(tests)

    # Ch·∫°y tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)

    # K·∫øt qu·∫£
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ T·∫•t c·∫£ tests ƒë√£ pass!")
        print("üöÄ H·ªá th·ªëng s·∫µn s√†ng ƒë·ªÉ ch·∫°y!")
    else:
        print("‚ùå M·ªôt s·ªë tests th·∫•t b·∫°i!")
        print(f"Failures: {len(result.failures)}")
        print(f"Errors: {len(result.errors)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
